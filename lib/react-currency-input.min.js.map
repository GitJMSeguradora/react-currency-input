{"version":3,"file":"react-currency-input.min.js","sources":["../src/mask.js","../src/object-assign-polyfill.js","../src/index.js"],"sourcesContent":["\r\nexport default function mask(value, precision = 2, decimalSeparator = '.', thousandSeparator = ',', allowNegative = false, prefix = '', suffix = '', event) {\r\n    // provide some default values and arg validation.\r\n    if (precision < 0) { precision = 0; } // precision cannot be negative\r\n    if (precision > 20) { precision = 20; } // precision cannot be greater than 20\r\n\r\n    if (value === null || value === undefined) {\r\n        return {\r\n            value: 0,\r\n            maskedValue: ''\r\n        };\r\n    }\r\n\r\n    value = String(value); //if the given value is a Number, let's convert into String to manipulate that\r\n\r\n    if (value.length == 0) {\r\n        return {\r\n            value: 0,\r\n            maskedValue: ''\r\n        };\r\n    }\r\n\r\n    // extract digits. if no digits, fill in a zero.\r\n    let digits = value.match(/\\d/g) || ['0'];\r\n\r\n    let numberIsNegative = false;\r\n    if (allowNegative) {\r\n        let negativeSignCount = (value.match(/-/g) || []).length;\r\n        // number will be negative if we have an odd number of \"-\"\r\n        // ideally, we should only ever have 0, 1 or 2 (positive number, making a number negative\r\n        // and making a negative number positive, respectively)\r\n        numberIsNegative = negativeSignCount % 2 === 1;\r\n\r\n        // if every digit in the array is '0', then the number should never be negative\r\n        let allDigitsAreZero = true;\r\n        for (let idx = 0; idx < digits.length; idx += 1) {\r\n            if (digits[idx] !== '0') {\r\n                allDigitsAreZero = false;\r\n                break;\r\n            }\r\n        }\r\n        if (allDigitsAreZero) {\r\n            numberIsNegative = false;\r\n        }\r\n    }\r\n\r\n    // zero-pad a input\r\n    while (digits.length <= precision) { digits.unshift('0'); }\r\n\r\n    // issue #16 fix\r\n    if (event) {\r\n        digits.pop();\r\n    }\r\n\r\n    if (precision > 0) {\r\n        // add the decimal separator\r\n        digits.splice(digits.length - precision, 0, \".\");\r\n    }\r\n\r\n    // clean up extraneous digits like leading zeros.\r\n    digits = Number(digits.join('')).toFixed(precision).split('');\r\n    let raw = Number(digits.join(''));\r\n\r\n    let decimalpos = digits.length - precision - 1;  // -1 needed to position the decimal separator before the digits.\r\n    if (precision > 0) {\r\n        // set the final decimal separator\r\n        digits[decimalpos] = decimalSeparator;\r\n    } else {\r\n        // when precision is 0, there is no decimal separator.\r\n        decimalpos = digits.length;\r\n    }\r\n\r\n    // add in any thousand separators\r\n    for (let x = decimalpos - 3; x > 0; x = x - 3) {\r\n        digits.splice(x, 0, thousandSeparator);\r\n    }\r\n\r\n    // if we have a prefix or suffix, add them in.\r\n    if (prefix.length > 0) { digits.unshift(prefix); }\r\n    if (suffix.length > 0) { digits.push(suffix); }\r\n\r\n    // if the number is negative, insert a \"-\" to\r\n    // the front of the array and negate the raw value\r\n    if (allowNegative && numberIsNegative) {\r\n        digits.unshift('-');\r\n        raw = -raw;\r\n    }\r\n\r\n    return {\r\n        value: raw,\r\n        maskedValue: digits.join('').trim()\r\n    };\r\n}\r\n","Object.assign = Object.assign ||\r\n  function(target) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      var source = arguments[i];\r\n      for (var key in source) {\r\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n          target[key] = source[key];\r\n        }\r\n      }\r\n    }\r\n    return target;\r\n  };\r\n","import './object-assign-polyfill';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport mask from './mask.js';\r\n\r\n// IE* parseFloat polyfill\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat#Polyfill\r\nNumber.parseFloat = parseFloat;\r\n\r\nclass CurrencyInput extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.prepareProps = this.prepareProps.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleFocus = this.handleFocus.bind(this);\r\n    this.handleOnKeyDown = this.handleOnKeyDown.bind(this);\r\n    this.setSelectionRange = this.setSelectionRange.bind(this);\r\n    this.state = this.prepareProps(this.props);\r\n\r\n    this.inputSelectionStart = 1;\r\n    this.inputSelectionEnd = 1;\r\n  }\r\n\r\n  /**\r\n   * Exposes the current masked value.\r\n   *\r\n   * @returns {String}\r\n   */\r\n  getMaskedValue() {\r\n    return this.state.maskedValue;\r\n  }\r\n\r\n  /**\r\n   * General function used to cleanup and define the final props used for rendering\r\n   * @returns {{ maskedValue: {String}, value: {Number}, customProps: {Object} }}\r\n   */\r\n  prepareProps(props) {\r\n    let customProps = { ...props }; // babeljs converts to Object.assign, then polyfills.\r\n    delete customProps.onChange;\r\n    delete customProps.onChangeEvent;\r\n    delete customProps.value;\r\n    delete customProps.decimalSeparator;\r\n    delete customProps.thousandSeparator;\r\n    delete customProps.precision;\r\n    delete customProps.inputType;\r\n    delete customProps.allowNegative;\r\n    delete customProps.allowEmpty;\r\n    delete customProps.prefix;\r\n    delete customProps.suffix;\r\n    delete customProps.selectAllOnFocus;\r\n    delete customProps.autoFocus;\r\n\r\n    let initialValue = props.value;\r\n    if (initialValue === null) {\r\n      initialValue = props.allowEmpty ? null : '';\r\n    } else {\r\n      if (typeof initialValue == 'string') {\r\n        // Some people, when confronted with a problem, think \"I know, I'll use regular expressions.\"\r\n        // Now they have two problems.\r\n\r\n        // Strip out thousand separators, prefix, and suffix, etc.\r\n        if (props.thousandSeparator === '.') {\r\n          // special handle the . thousand separator\r\n          initialValue = initialValue.replace(/\\./g, '');\r\n        }\r\n\r\n        if (props.decimalSeparator != '.') {\r\n          // fix the decimal separator\r\n          initialValue = initialValue.replace(new RegExp(props.decimalSeparator, 'g'), '.');\r\n        }\r\n\r\n        //Strip out anything that is not a digit, -, or decimal separator\r\n        initialValue = initialValue.replace(/[^0-9-.]/g, '');\r\n\r\n        // now we can parse.\r\n        initialValue = Number.parseFloat(initialValue);\r\n      }\r\n      initialValue = Number(initialValue).toLocaleString(undefined, {\r\n        style: 'decimal',\r\n        minimumFractionDigits: props.precision,\r\n        maximumFractionDigits: props.precision,\r\n      });\r\n    }\r\n\r\n    const { maskedValue, value } = mask(\r\n      initialValue,\r\n      props.precision,\r\n      props.decimalSeparator,\r\n      props.thousandSeparator,\r\n      props.allowNegative,\r\n      props.prefix,\r\n      props.suffix\r\n    );\r\n\r\n    return { maskedValue, value, customProps };\r\n  }\r\n\r\n  /**\r\n   * Component lifecycle function.\r\n   * Invoked when a component is receiving new props. This method is not called for the initial render.\r\n   *\r\n   * @param nextProps\r\n   * @see https://facebook.github.io/react/docs/component-specs.html#updating-componentwillreceiveprops\r\n   */\r\n  componentWillReceiveProps(nextProps) {\r\n    this.setState(this.prepareProps(nextProps));\r\n  }\r\n\r\n  /**\r\n   * Component lifecycle function\r\n   * @returns {XML}\r\n   * @see https://facebook.github.io/react/docs/react-component.html#componentwillupdate\r\n   */\r\n  componentWillUpdate() {\r\n    let node = ReactDOM.findDOMNode(this.theInput);\r\n    this.inputSelectionStart = node.selectionStart;\r\n    this.inputSelectionEnd = node.selectionEnd;\r\n  }\r\n\r\n  /**\r\n   * Component lifecycle function.\r\n   * @returns {XML}\r\n   * @see https://facebook.github.io/react/docs/react-component.html#componentdidupdate\r\n   */\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { decimalSeparator } = this.props;\r\n    let isNegative = (this.theInput.value.match(/-/g) || []).length % 2 === 1;\r\n    let minPos = this.props.prefix.length + (isNegative ? 1 : 0);\r\n    let selectionEnd = Math.max(\r\n      minPos,\r\n      Math.min(this.inputSelectionEnd, this.theInput.value.length - this.props.suffix.length)\r\n    );\r\n    let selectionStart = Math.max(minPos, Math.min(this.inputSelectionEnd, selectionEnd));\r\n\r\n    let regexEscapeRegex = /[-[\\]{}()*+?.,\\\\^$|#\\s]/g;\r\n    let separatorsRegex = new RegExp(\r\n      decimalSeparator.replace(regexEscapeRegex, '\\\\$&') +\r\n      '|' +\r\n      this.props.thousandSeparator.replace(regexEscapeRegex, '\\\\$&'),\r\n      'g'\r\n    );\r\n    let currSeparatorCount = (this.state.maskedValue.match(separatorsRegex) || []).length;\r\n    let prevSeparatorCount = (prevState.maskedValue.match(separatorsRegex) || []).length;\r\n    let adjustment = Math.max(currSeparatorCount - prevSeparatorCount, 0);\r\n\r\n    selectionEnd = selectionEnd + adjustment;\r\n    selectionStart = selectionStart + adjustment;\r\n\r\n    const precision = Number(this.props.precision);\r\n\r\n    let baselength =\r\n      this.props.suffix.length +\r\n      this.props.prefix.length +\r\n      (precision > 0 ? decimalSeparator.length : 0) + // if precision is 0 there will be no decimal part\r\n      precision +\r\n      1; // This is to account for the default '0' value that comes before the decimal separator\r\n\r\n    if (this.state.maskedValue.length == baselength) {\r\n      // if we are already at base length, position the cursor at the end.\r\n      selectionEnd = this.theInput.value.length - this.props.suffix.length;\r\n      selectionStart = selectionEnd;\r\n    }\r\n\r\n    this.inputSelectionStart = selectionStart;\r\n    this.inputSelectionEnd = selectionEnd;\r\n  }\r\n\r\n  /**\r\n   * Set selection range only if input is in focused state\r\n   * @param node DOMElement\r\n   * @param start number\r\n   * @param end number\r\n   */\r\n  setSelectionRange(node, start, end) {\r\n    if (document.activeElement === node) {\r\n      node.setSelectionRange(start, end);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * onKeyDown Event Handler\r\n   * @param event \r\n   */\r\n  handleOnKeyDown(event) {\r\n    if (event.keyCode === 8) {\r\n      this.handleChange(event)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * onChange Event Handler\r\n   * @param event\r\n   */\r\n  handleChange(event) {\r\n    event.preventDefault();\r\n    let { maskedValue, value } = mask(\r\n      event.target.value,\r\n      this.props.precision,\r\n      this.props.decimalSeparator,\r\n      this.props.thousandSeparator,\r\n      this.props.allowNegative,\r\n      this.props.prefix,\r\n      this.props.suffix,\r\n      event.keyCode === 8\r\n    );\r\n\r\n    event.persist(); // fixes issue #23\r\n\r\n    this.setState({ maskedValue, value }, () => {\r\n      this.props.onChange(maskedValue, value, event);\r\n      this.props.onChangeEvent(event, maskedValue, value);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * onFocus Event Handler\r\n   * @param event\r\n   */\r\n  handleFocus(event) {\r\n    if (!this.theInput) return;\r\n\r\n    //Whenever we receive focus check to see if the position is before the suffix, if not, move it.\r\n    let selectionEnd = this.theInput.value.length - this.props.suffix.length;\r\n    let isNegative = (this.theInput.value.match(/-/g) || []).length % 2 === 1;\r\n    let selectionStart = this.props.prefix.length + (isNegative ? 1 : 0);\r\n    this.props.selectAllOnFocus && event.target.setSelectionRange(selectionStart, selectionEnd);\r\n    this.inputSelectionStart = selectionStart;\r\n    this.inputSelectionEnd = selectionEnd;\r\n  }\r\n\r\n  handleBlur(event) {\r\n    this.inputSelectionStart = 0;\r\n    this.inputSelectionEnd = 0;\r\n  }\r\n\r\n  /**\r\n   * Component lifecycle function.\r\n   * @returns {XML}\r\n   * @see https://facebook.github.io/react/docs/component-specs.html#render\r\n   */\r\n  render() {\r\n    return (\r\n      <input\r\n        ref={input => {\r\n          this.theInput = input;\r\n        }}\r\n        type={this.props.inputType}\r\n        value={this.state.maskedValue}\r\n        onChange={this.handleChange}\r\n        onFocus={this.handleFocus}\r\n        onMouseUp={this.handleFocus}\r\n        onKeyDown={this.handleOnKeyDown}\r\n        {...this.state.customProps}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Prop validation.\r\n * @see https://facebook.github.io/react/docs/component-specs.html#proptypes\r\n */\r\n\r\nCurrencyInput.propTypes = {\r\n  onChange: PropTypes.func,\r\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  decimalSeparator: PropTypes.string,\r\n  thousandSeparator: PropTypes.string,\r\n  precision: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  inputType: PropTypes.string,\r\n  allowNegative: PropTypes.bool,\r\n  allowEmpty: PropTypes.bool,\r\n  prefix: PropTypes.string,\r\n  suffix: PropTypes.string,\r\n  selectAllOnFocus: PropTypes.bool,\r\n};\r\n\r\nCurrencyInput.defaultProps = {\r\n  onChange: function (maskValue, value, event) {\r\n    /*no-op*/\r\n  },\r\n  onChangeEvent: function (event, maskValue, value) {\r\n    /*no-op*/\r\n  },\r\n  autoFocus: false,\r\n  value: '0',\r\n  decimalSeparator: '.',\r\n  thousandSeparator: ',',\r\n  precision: '2',\r\n  inputType: 'text',\r\n  allowNegative: false,\r\n  prefix: '',\r\n  suffix: '',\r\n  selectAllOnFocus: false,\r\n};\r\n\r\nexport default CurrencyInput;\r\n"],"names":["mask","value","precision","decimalSeparator","thousandSeparator","allowNegative","prefix","suffix","event","maskedValue","String","length","let","digits","match","numberIsNegative","allDigitsAreZero","idx","unshift","pop","splice","Number","join","toFixed","split","raw","decimalpos","x","push","trim","Object","assign","target","i","arguments","source","key","prototype","hasOwnProperty","call","parseFloat","CurrencyInput","props","super","this","prepareProps","bind","handleChange","handleFocus","handleOnKeyDown","setSelectionRange","state","inputSelectionStart","inputSelectionEnd","getMaskedValue","customProps","onChange","onChangeEvent","inputType","allowEmpty","selectAllOnFocus","autoFocus","initialValue","replace","RegExp","toLocaleString","undefined","style","minimumFractionDigits","maximumFractionDigits","componentWillReceiveProps","nextProps","setState","componentWillUpdate","node","ReactDOM","findDOMNode","theInput","selectionStart","selectionEnd","componentDidUpdate","prevProps","prevState","isNegative","minPos","Math","max","min","regexEscapeRegex","separatorsRegex","currSeparatorCount","prevSeparatorCount","adjustment","const","baselength","start","end","document","activeElement","keyCode","preventDefault","persist","handleBlur","render","React","ref","input","type","onFocus","onMouseUp","onKeyDown","Component","propTypes","PropTypes","func","oneOfType","number","string","bool","defaultProps","maskValue"],"mappings":"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"}